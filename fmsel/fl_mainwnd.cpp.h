// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "fl_mainwnd.h"

Fl_Double_Window *pMainWnd=(Fl_Double_Window *)0;

Fl_FM_List *pFMList=(Fl_FM_List *)0;

static Fl_Group *pGroupBottom=(Fl_Group *)0;

static Fl_Button *pBtnSkipFM=(Fl_Button *)0;

static Fl_FM_Return_Button *pBtnPlayFM=(Fl_FM_Return_Button *)0;

static Fl_Button *pBtnStartFM=(Fl_Button *)0;

static Fl_Group *pGroupTop=(Fl_Group *)0;

static Fl_FM_Filter_Input *pFilterName=(Fl_FM_Filter_Input *)0;

static Fl_Choice *pFilterRating=(Fl_Choice *)0;

static Fl_Choice *pFilterPrio=(Fl_Choice *)0;

static Fl_FM_Filter_Button *pFilterNotPlayed=(Fl_FM_Filter_Button *)0;

static Fl_FM_Filter_Button *pFilterCompleted=(Fl_FM_Filter_Button *)0;

static Fl_FM_Filter_Button *pFilterInProgress=(Fl_FM_Filter_Button *)0;

static Fl_FM_Filter_Button *pFilterArchived=(Fl_FM_Filter_Button *)0;

static Fl_FM_Filter_Button *pFilterNotAvail=(Fl_FM_Filter_Button *)0;

static Fl_FM_Filter_Input *pFilterRelDateFrom=(Fl_FM_Filter_Input *)0;

static Fl_FM_Filter_Input *pFilterRelDateTo=(Fl_FM_Filter_Input *)0;

static Fl_FM_TagFilter_Group *pTagFilterGroup=(Fl_FM_TagFilter_Group *)0;

static Fl_Double_Window* MakeWindow() {
  { pMainWnd = new Fl_Double_Window(630, 380, $("Dark FM Selector"));
    { Fl_FM_List* o = pFMList = new Fl_FM_List(5, 80, 620, 255);
      pFMList->box(FL_NO_BOX);
      pFMList->color((Fl_Color)FL_BACKGROUND2_COLOR);
      pFMList->selection_color((Fl_Color)230);
      pFMList->labeltype(FL_NORMAL_LABEL);
      pFMList->labelfont(0);
      pFMList->labelsize(10);
      pFMList->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      pFMList->textfont(1);
      pFMList->align(FL_ALIGN_BOTTOM);
      pFMList->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(pFMList);
      pFMList->selection_color( fl_rgb_color(170,238,255) );
      o->labelsize(FL_NORMAL_SIZE-2);
    } // Fl_FM_List* pFMList
    { pGroupBottom = new Fl_Group(5, 348, 620, 32);
      { Fl_Button* o = pBtnSkipFM = new Fl_Button(5, 348, 120, 25, $("Skip FM"));
        pBtnSkipFM->tooltip($("Launch without FM"));
        pBtnSkipFM->shortcut(0xff1b);
        pBtnSkipFM->callback((Fl_Callback*)OnPlayOM);
        pBtnSkipFM->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        o->image(imgPlay);
        o->labeltype(IMAGETEXT_LABEL);
      } // Fl_Button* pBtnSkipFM
      { Fl_FM_Return_Button* o = pBtnPlayFM = new Fl_FM_Return_Button(136, 348, 120, 25, $("Play FM"));
        pBtnPlayFM->tooltip($("Launch selected FM"));
        pBtnPlayFM->box(FL_UP_BOX);
        pBtnPlayFM->color((Fl_Color)FL_BACKGROUND_COLOR);
        pBtnPlayFM->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        pBtnPlayFM->labeltype(FL_NORMAL_LABEL);
        pBtnPlayFM->labelfont(0);
        pBtnPlayFM->labelsize(12);
        pBtnPlayFM->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        pBtnPlayFM->callback((Fl_Callback*)OnPlayFM);
        pBtnPlayFM->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        pBtnPlayFM->when(FL_WHEN_RELEASE);
        o->image(imgPlayFM);
        o->deimage(pImgPlayFMGray);
        o->labeltype(IMAGETEXT_LABEL);
        o->labelsize(FL_NORMAL_SIZE);
      } // Fl_FM_Return_Button* pBtnPlayFM
      { Fl_Button* o = pBtnStartFM = new Fl_Button(263, 348, 120, 25, $("Start FM"));
        pBtnStartFM->tooltip($("Launch selected FM and change status to \'Playing\'"));
        pBtnStartFM->callback((Fl_Callback*)OnStartFM);
        pBtnStartFM->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        o->image(imgStartFM);
        o->deimage(pImgStartFMGray);
        o->labeltype(IMAGETEXT_LABEL);
      } // Fl_Button* pBtnStartFM
      { Fl_Button* o = new Fl_Button(525, 348, 100, 25, $("Exit"));
        o->callback((Fl_Callback*)OnExit);
      } // Fl_Button* o
      { Fl_Group* o = new Fl_Group(395, 348, 14, 25);
        o->hide();
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      { Fl_FM_Config_Button* o = new Fl_FM_Config_Button(411, 348, 44, 25);
        o->tooltip($("Options/Tasks menu"));
        o->box(FL_UP_BOX);
        o->color((Fl_Color)FL_BACKGROUND_COLOR);
        o->selection_color((Fl_Color)FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE_ALWAYS);
        o->image(imgOptions);
        o->labelsize(FL_NORMAL_SIZE);
      } // Fl_FM_Config_Button* o
      pGroupBottom->end();
    } // Fl_Group* pGroupBottom
    { pGroupTop = new Fl_Group(5, 5, 620, 40);
      { Fl_FM_Filter_Input* o = pFilterName = new Fl_FM_Filter_Input(5, 20, 180, 24, $("Name"));
        pFilterName->tooltip($("Only show FMs whose names contain this sub-string"));
        pFilterName->box(FL_DOWN_BOX);
        pFilterName->color((Fl_Color)FL_BACKGROUND2_COLOR);
        pFilterName->selection_color((Fl_Color)FL_SELECTION_COLOR);
        pFilterName->labeltype(FL_NORMAL_LABEL);
        pFilterName->labelfont(0);
        pFilterName->labelsize(11);
        pFilterName->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        pFilterName->textsize(12);
        pFilterName->callback((Fl_Callback*)OnFilterName);
        pFilterName->align(FL_ALIGN_TOP_LEFT);
        pFilterName->when(FL_WHEN_RELEASE);
        o->when(FL_WHEN_ENTER_KEY | FL_WHEN_CHANGED | FL_WHEN_RELEASE_ALWAYS);
        o->textsize(FL_NORMAL_SIZE);
      } // Fl_FM_Filter_Input* pFilterName
      { Fl_Choice* o = pFilterRating = new Fl_Choice(195, 20, 55, 24, $("Min Rating"));
        pFilterRating->tooltip($("Show  FMs with a minimum rating of"));
        pFilterRating->down_box(FL_BORDER_BOX);
        pFilterRating->labelsize(11);
        pFilterRating->callback((Fl_Callback*)OnFilterRating);
        pFilterRating->align(FL_ALIGN_TOP_LEFT);
        o->menu(g_mnuFiltRating);
      } // Fl_Choice* pFilterRating
      { Fl_Choice* o = pFilterPrio = new Fl_Choice(260, 20, 55, 24, $("Min Pri"));
        pFilterPrio->tooltip($("Show  FMs with a minimum priority of"));
        pFilterPrio->down_box(FL_BORDER_BOX);
        pFilterPrio->labelsize(11);
        pFilterPrio->callback((Fl_Callback*)OnFilterPriority);
        pFilterPrio->align(FL_ALIGN_TOP_LEFT);
        o->menu(g_mnuFiltPrio);
      } // Fl_Choice* pFilterPrio
      { Fl_Box* o = new Fl_Box(322, 6, 45, 15, $("Status"));
        o->labelsize(11);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Box* o
      { Fl_FM_Filter_Button* o = pFilterNotPlayed = new Fl_FM_Filter_Button(325, 20, 30, 24);
        pFilterNotPlayed->tooltip($("Show FMs that haven\'t been completed or currently in progress"));
        pFilterNotPlayed->type(1);
        pFilterNotPlayed->box(FL_UP_BOX);
        pFilterNotPlayed->color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterNotPlayed->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterNotPlayed->labeltype(FL_NORMAL_LABEL);
        pFilterNotPlayed->labelfont(0);
        pFilterNotPlayed->labelsize(14);
        pFilterNotPlayed->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        pFilterNotPlayed->callback((Fl_Callback*)OnFilterToggle, (void*)(1));
        pFilterNotPlayed->align(FL_ALIGN_CENTER);
        pFilterNotPlayed->when(FL_WHEN_RELEASE);
        o->image(imgNotPlayed);
        o->deimage(imgNotPlayed);
        o->down_color(TOGBTN_DN_CLR);
      } // Fl_FM_Filter_Button* pFilterNotPlayed
      { Fl_FM_Filter_Button* o = pFilterCompleted = new Fl_FM_Filter_Button(354, 20, 30, 24);
        pFilterCompleted->tooltip($("Show completed FMs"));
        pFilterCompleted->type(1);
        pFilterCompleted->box(FL_UP_BOX);
        pFilterCompleted->color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterCompleted->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterCompleted->labeltype(FL_NORMAL_LABEL);
        pFilterCompleted->labelfont(0);
        pFilterCompleted->labelsize(14);
        pFilterCompleted->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        pFilterCompleted->callback((Fl_Callback*)OnFilterToggle, (void*)(2));
        pFilterCompleted->align(FL_ALIGN_CENTER);
        pFilterCompleted->when(FL_WHEN_RELEASE);
        o->image(imgCheck);
        o->deimage(pImgCheckGray);
        o->down_color(TOGBTN_DN_CLR);
      } // Fl_FM_Filter_Button* pFilterCompleted
      { Fl_FM_Filter_Button* o = pFilterInProgress = new Fl_FM_Filter_Button(383, 20, 30, 24);
        pFilterInProgress->tooltip($("Show FMs with a playthrough in progress"));
        pFilterInProgress->type(1);
        pFilterInProgress->box(FL_UP_BOX);
        pFilterInProgress->color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterInProgress->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterInProgress->labeltype(FL_NORMAL_LABEL);
        pFilterInProgress->labelfont(0);
        pFilterInProgress->labelsize(14);
        pFilterInProgress->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        pFilterInProgress->callback((Fl_Callback*)OnFilterToggle, (void*)(3));
        pFilterInProgress->align(FL_ALIGN_CENTER);
        pFilterInProgress->when(FL_WHEN_RELEASE);
        o->image(imgProgress);
        o->deimage(pImgProgressGray);
        o->down_color(TOGBTN_DN_CLR);
      } // Fl_FM_Filter_Button* pFilterInProgress
      { Fl_Box* o = new Fl_Box(420, 6, 35, 15, $("Avail"));
        o->labelsize(11);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Box* o
      { Fl_FM_Filter_Button* o = pFilterArchived = new Fl_FM_Filter_Button(423, 20, 30, 24);
        pFilterArchived->tooltip($("Show archived FMs that aren\'t installed"));
        pFilterArchived->type(1);
        pFilterArchived->box(FL_UP_BOX);
        pFilterArchived->color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterArchived->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterArchived->labeltype(FL_NORMAL_LABEL);
        pFilterArchived->labelfont(0);
        pFilterArchived->labelsize(14);
        pFilterArchived->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        pFilterArchived->callback((Fl_Callback*)OnFilterToggle, (void*)(5));
        pFilterArchived->align(FL_ALIGN_CENTER);
        pFilterArchived->when(FL_WHEN_RELEASE);
        o->image(imgArchived);
        o->deimage(pImgArchivedGray);
        o->down_color(TOGBTN_DN_CLR);
      } // Fl_FM_Filter_Button* pFilterArchived
      { Fl_FM_Filter_Button* o = pFilterNotAvail = new Fl_FM_Filter_Button(452, 20, 30, 24);
        pFilterNotAvail->tooltip($("Show FMs that aren\'t available"));
        pFilterNotAvail->type(1);
        pFilterNotAvail->box(FL_UP_BOX);
        pFilterNotAvail->color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterNotAvail->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        pFilterNotAvail->labeltype(FL_NORMAL_LABEL);
        pFilterNotAvail->labelfont(0);
        pFilterNotAvail->labelsize(14);
        pFilterNotAvail->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        pFilterNotAvail->callback((Fl_Callback*)OnFilterToggle, (void*)(4));
        pFilterNotAvail->align(FL_ALIGN_CENTER);
        pFilterNotAvail->when(FL_WHEN_RELEASE);
        o->image(imgNotAvail);
        o->deimage(pImgNotAvailGray);
        o->down_color(TOGBTN_DN_CLR);
      } // Fl_FM_Filter_Button* pFilterNotAvail
      { Fl_FM_Filter_Input* o = pFilterRelDateFrom = new Fl_FM_Filter_Input(491, 20, 25, 24, $("Rel. Year"));
        pFilterRelDateFrom->tooltip($("Show FMs released from year (YY), leave empty for no lower limit"));
        pFilterRelDateFrom->type(2);
        pFilterRelDateFrom->box(FL_DOWN_BOX);
        pFilterRelDateFrom->color((Fl_Color)FL_BACKGROUND2_COLOR);
        pFilterRelDateFrom->selection_color((Fl_Color)FL_SELECTION_COLOR);
        pFilterRelDateFrom->labeltype(FL_NORMAL_LABEL);
        pFilterRelDateFrom->labelfont(0);
        pFilterRelDateFrom->labelsize(11);
        pFilterRelDateFrom->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        pFilterRelDateFrom->textsize(12);
        pFilterRelDateFrom->callback((Fl_Callback*)OnFilterRelFrom);
        pFilterRelDateFrom->align(FL_ALIGN_TOP_LEFT);
        pFilterRelDateFrom->when(FL_WHEN_ENTER_KEY);
        o->maximum_size(2);
        o->when(FL_WHEN_ENTER_KEY | FL_WHEN_RELEASE);
        o->textsize(FL_NORMAL_SIZE);
      } // Fl_FM_Filter_Input* pFilterRelDateFrom
      { Fl_FM_Filter_Input* o = pFilterRelDateTo = new Fl_FM_Filter_Input(527, 20, 25, 24, $("-"));
        pFilterRelDateTo->tooltip($("Show FMs released up to and including year (YY), leave empty for no upper lim\
it"));
        pFilterRelDateTo->type(2);
        pFilterRelDateTo->box(FL_DOWN_BOX);
        pFilterRelDateTo->color((Fl_Color)FL_BACKGROUND2_COLOR);
        pFilterRelDateTo->selection_color((Fl_Color)FL_SELECTION_COLOR);
        pFilterRelDateTo->labeltype(FL_NORMAL_LABEL);
        pFilterRelDateTo->labelfont(0);
        pFilterRelDateTo->labelsize(11);
        pFilterRelDateTo->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        pFilterRelDateTo->textsize(12);
        pFilterRelDateTo->callback((Fl_Callback*)OnFilterRelTo);
        pFilterRelDateTo->align(FL_ALIGN_LEFT);
        pFilterRelDateTo->when(FL_WHEN_ENTER_KEY);
        o->maximum_size(2);
        o->when(FL_WHEN_ENTER_KEY | FL_WHEN_RELEASE);
        o->textsize(FL_NORMAL_SIZE);
      } // Fl_FM_Filter_Input* pFilterRelDateTo
      { Fl_Group* o = new Fl_Group(557, 5, 4, 40);
        o->hide();
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      { Fl_Button* o = new Fl_Button(562, 20, 30, 24);
        o->tooltip($("Refresh list to apply filter and sorting to status changes etc."));
        o->callback((Fl_Callback*)OnRefreshFilters);
        o->image(imgRefresh);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(595, 20, 30, 24);
        o->tooltip($("Reset to default filter settings"));
        o->callback((Fl_Callback*)OnResetFilters);
        o->image(imgResetFilters);
      } // Fl_Button* o
      pGroupTop->end();
    } // Fl_Group* pGroupTop
    { Fl_FM_TagFilter_Group* o = pTagFilterGroup = new Fl_FM_TagFilter_Group(5, 50, 620, 21);
      pTagFilterGroup->box(FL_FLAT_BOX);
      pTagFilterGroup->color((Fl_Color)16);
      pTagFilterGroup->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      pTagFilterGroup->labeltype(FL_NORMAL_LABEL);
      pTagFilterGroup->labelfont(0);
      pTagFilterGroup->labelsize(14);
      pTagFilterGroup->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      pTagFilterGroup->align(FL_ALIGN_TOP);
      pTagFilterGroup->when(FL_WHEN_RELEASE);
      o->color( fl_rgb_color(226,226,217) );
      pTagFilterGroup->end();
    } // Fl_FM_TagFilter_Group* pTagFilterGroup
    pMainWnd->size_range(630, 380);
    pMainWnd->end();
  } // Fl_Double_Window* pMainWnd
  return pMainWnd;
}
